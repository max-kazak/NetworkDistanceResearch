data.frame(mods, acc)
}
print(Sys.time-strt)
stopCluster(cl)
classify.multiple <- function(times ,graph, clusters, distance, alpha) {
D = distance(graph, alpha)
#classification for numerous times
class <- vector()
for(i in seq(times)) {
cat("=")
class <- c(class,classify(D, clusters, distance))
dim(class) <- c(77,i)
}
rownames(class) <- V(graph)$name
#voting across all classifications
class.vote <- apply(class,1,function(x) as.numeric(names(which.max(table(x)))))
class.vote
}
classify.multiple <- function(times ,graph, clusters, distance, alpha) {
D = distance(graph, alpha)
#classification for numerous times
class <- vector()
for(i in seq(times)) {
#cat("=")
class <- c(class,classify(D, clusters, distance))
dim(class) <- c(77,i)
}
rownames(class) <- V(graph)$name
#voting across all classifications
class.vote <- apply(class,1,function(x) as.numeric(names(which.max(table(x)))))
class.vote
}
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect)) %dopar% {
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect)) %dopar% {
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
stopCluster(cl)
cl = makeCluster(4)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect)) %dopar% {
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect)) %dopar% {
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect), .packages="igraph") %dopar% {
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect), .packages="igraph") %dopar% {
source("metrics.R")
source("classification.R")
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect), .packages="igraph") %dopar% {
source("metrics.R")
source("classification.R")
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
source('metrics.R')
source('classification.R')
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect), .packages="igraph") %dopar% {
source("metrics.R")
source("classification.R")
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
lres
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect), .packages="igraph") %dopar% {
#source("metrics.R")
#source("classification.R")
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect), .packages="igraph") %dopar% {
source("metrics.R")
#source("classification.R")
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
lres
unlist(lres)
lres
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect), .packages="igraph") %dopar% {
source("metrics.R")
#source("classification.R")
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:100) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(dist = dist.vect, .packages="igraph") %dopar% {
source("metrics.R")
#source("classification.R")
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:10) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist, alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
lres
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
lres = foreach(i = 1:length(dist.vect), .packages="igraph") %dopar% {
source("metrics.R")
#source("classification.R")
#cat("Classification with ", names(dist.vect)[i])
mods = vector()
acc = vector()
for(j in 1:100) {
#cat("\nfor time", j, ": ")
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
lres[1]
lres[[1]]
fix.mods.df = data.frame(matrix(NA, nrow=100, ncol=0))
fix.acc.df = data.frame(matrix(NA, nrow=100, ncol=0))
for(i in 1:length(dist.vect)) {
fix.mods.df[names(dist.vect[i])] = lres[[i]]$mods
fix.acc.df[names(dist.vect[i])] = lres[[i]]$acc
}
fix.mods.df
fix.mods.melted.df <- melt(fix.mods.df)
g.fix.mod <- ggplot(fix.mods.melted.df, aes(factor(variable),value)) +
geom_boxplot()
png(filename=file.path(folder,'miserables_mod_fixed_alpha.png'))
plot(g.fix.mod)
dev.off()
plot(g.fix.mod)
library(igraph)
library(ggplot2)
library(reshape2)
#prepare for parallel computation
library(doParallel)
library(foreach)
numWorkers=4
source('metrics.R')
#Load Les Miserables graph
load("miserables.Rdata")
#view graph
V(miserables)
plot(miserables)
# let's see if we have communities here using the
# Grivan-Newman algorithm
# 1st we calculate the edge betweenness, merges, etc...
ebc <- edge.betweenness.community(miserables, directed=F)
# Now we have the merges/splits and we need to calculate the modularity
# for each merge for this we'll use a function that for each edge
# removed will create a second graph, check for its membership and use
# that membership to calculate the modularity
mods <- sapply(0:ecount(miserables), function(i){
g <- delete.edges(miserables, ebc$removed.edges[seq(length=i)])
cl <- clusters(g)$membership
modularity(miserables,cl)
})
# we can now plot all modularities
plot(mods, pch=20)
#save clusterization with max modularity
miserables.separated = delete.edges(miserables, ebc$removed.edges[seq(length=which.max(mods)-1)])
miserables.clust = clusters(miserables.separated)$membership
#clusters in df
df.clust = data.frame(V(miserables)$name,miserables.clust)
colnames(df.clust) = c("V","clust")
#view graph colored by cluster
V(miserables)$color = miserables.clust
miserables$layout <- layout.fruchterman.reingold
plot(miserables)
#tkplot(miserables)
#=======================classification=======================================
source('classification.R')
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = logforest_dist, alpha = 0.01)
#plot
V(miserables)$color = class
plot(miserables)
#=====================modularity and error alpha-resistance==========================
alphas <- seq(0.01, 1.0, by=0.01)
dist.vect <- c(plainwalk_dist, walk_dist , plainforest_dist, logforest_dist, communicability_dist, logcommunicability_dist)
names(dist.vect) <- c("plain_walk", "walk", "plain_forest", "log_forest", "communicability", "log_communicability")
cl = makeCluster(numWorkers)
registerDoParallel(cl)
strt <- Sys.time()
#calculate modularity for each alpha in alphas
lres = foreach(i = 1:length(dist.vect), .packages="igraph") %dopar% {
source("metrics.R")
mods = vector()
acc = vector()
for(a in alphas) {
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = dist.vect[[i]], alpha = a)
mods = c(mods, modularity(miserables, class))
acc = c(acc, sum(class==miserables.clust)/length(class))
}
data.frame(mods, acc)
}
print(Sys.time()-strt)
stopCluster(cl)
mods.df = data.frame(alpha = alphas)
acc.df = data.frame(alpha = alphas)
for(i in 1:length(dist.vect)) {
mods.df[names(dist.vect[i])] = lres[[i]]$mods
acc.df[names(dist.vect[i])] = lres[[i]]$acc
}
tkplot(miserables)
library(igraph)
load("miserables.Rdata")
tkplot(miserables)
ebc <- edge.betweenness.community(miserables, directed=F)
mods <- sapply(0:ecount(miserables), function(i){
g <- delete.edges(miserables, ebc$removed.edges[seq(length=i)])
cl <- clusters(g)$membership
modularity(miserables,cl)
})
miserables.separated = delete.edges(miserables, ebc$removed.edges[seq(length=which.max(mods)-1)])
miserables.clust = clusters(miserables.separated)$membership
V(miserables)$color = miserables.clust
plot(miserables)
v <- V(miserables)[1]
v
v$name
v$description
attributes(v)
parameters(v)
name(v)
v$name
v$Description
v$Author
V(miserables)$Description
desc <- V(miserables)$Description
strsplit(desc,",")
unlist(strsplit(desc,","))
?sapply
sapply(desc, function(x) strsplit(x,",")[1])
apply(desc, function(x) strsplit(x,",")[1])
sapply(desc, function(x) strsplit(x,",")[1])
strsplit(desc[1],",")
unlist(strsplit(desc[1],","))
lapply(desc, function(x) unlist(strsplit(x,","))[1])
unlist(lapply(desc, function(x) unlist(strsplit(x,","))[1]))
names <- unlist(lapply(desc, function(x) unlist(strsplit(x,","))[1]))
names[1] = "Myriel"
write(names, data="names.txt", sep=",")
write(names, file="names.txt", sep=",")
?read
?write
names <- read.table("names.txt")
names
names <- read.table("names.txt")$V1
names
?read.table
names <- read.table("names.txt", stringsAsFactors=F)$V1
names
names <- read.table("names.txt", stringsAsFactors=F)$V1
names
names <- read.table("names.txt", stringsAsFactors=F)$V1
names
plot(miserables)
oldnames<-V(miserables)$name
V(miserables)$name <- names
plot(miserables)
miserables$layout <- layout.fruchterman.reingold
plot(miserables)
miserables$layout <- layout.kamada.kawai
plot(miserables)
miserables$layout <- layout.kamada.kawai
plot(miserables)
miserables$layout <- layout.fruchterman.reingold
plot(miserables)
mylayout <- layout.fruchterman.reingold
miserables$layout <- mylayout
plot(miserables)
mylayout <- layout.fruchterman.reingold
miserables$layout <- mylayout
plot(miserables)
mylayout <- layout.fruchterman.reingold(miserables)
miserables$layout <- mylayout
plot(miserables)
mylayout <- layout.fruchterman.reingold(miserables)
miserables$layout <- mylayout
plot(miserables)
miserables$vertex.shape
miserables$vertex.shape=rectangle
miserables$vertex.shape="rectangle"
plot(miserables)
plot(miserables)
plot(miserables, vertex.shape="rectangle")
plot(miserables, vertex.shape="square")
plot(miserables, vertex.shape="csquare")
plot(miserables, vertex.shape="crectangle")
plot(miserables, vertex.shape="vrectangle")
plot(miserables, vertex.shape="none")
mlayout
mylayout
plot(miserables, vertex.shape="rectangle")
plot(miserables, label.dist=1)
V(miserables)
V(miserables)$label.color
plot(miserables, vertex.shape="none")
V(miserables)$label.color = miserables.clust
plot(miserables, vertex.shape="none")
?pallete
?palette
palette(brewer.pal(7, "Set2"))
library(RColorBrewer)
palette(brewer.pal(7, "Set2"))
plot(miserables, vertex.shape="none")
display.brewer.all()
palette(brewer.pal(7, "Dark2"))
plot(miserables, vertex.shape="none")
V(miserables)$vertex.shape="none"
r
plot(miserables)
plot(miserables, vertex.shape="none")
library(igraph)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
#prepare for parallel computation
library(doParallel)
library(foreach)
numWorkers=4
source('metrics.R')
#Load Les Miserables graph
load("miserables.Rdata")
names <- read.table("names.txt", stringsAsFactors=F)$V1
V(miserables)$name <- names
#add fixed layout
mylayout <- layout.fruchterman.reingold(miserables)
miserables$layout <- mylayout
#choose palette
palette(brewer.pal(7, "Dark2"))
display.brewer.all()
#view graph
plot(miserables, vertex.shape="none")
ebc <- edge.betweenness.community(miserables, directed=F)
# Now we have the merges/splits and we need to calculate the modularity
# for each merge for this we'll use a function that for each edge
# removed will create a second graph, check for its membership and use
# that membership to calculate the modularity
mods <- sapply(0:ecount(miserables), function(i){
g <- delete.edges(miserables, ebc$removed.edges[seq(length=i)])
cl <- clusters(g)$membership
modularity(miserables,cl)
})
miserables.separated = delete.edges(miserables, ebc$removed.edges[seq(length=which.max(mods)-1)])
miserables.clust = clusters(miserables.separated)$membership
#clusters in df
df.clust = data.frame(V(miserables)$name,miserables.clust)
colnames(df.clust) = c("V","clust")
#view graph colored by cluster
V(miserables)$label.color = miserables.clust
plot(miserables, vertex.shape="none")
source('classification.R')
class = classify.multiple(times = 100, graph = miserables, clusters = df.clust, distance = logforest_dist, alpha = 0.01)
V(miserables)$label.color = class
plot(miserables, vertex.shape="none")
